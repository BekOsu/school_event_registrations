pipeline {
    agent any

    environment {
        VENV = 'venv/bin/activate'
        PIP = 'venv/bin/pip'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Setup') {
            steps {
                sh 'python -m venv venv'
                sh "source $VENV && $PIP install -r requirements.txt pylint pytest twine"
            }
        }

        stage('Lint') {
            steps {
                sh "source $VENV && pylint --disable=C0114,C0116 your_python_file.py"
            }
        }

        stage('Test') {
            steps {
                sh "source $VENV && pytest"
            }
        }

        stage('Build') {
            steps {
                sh "source $VENV && python setup.py build"
            }
        }

        stage('Package') {
            steps {
                sh "source $VENV && python setup.py sdist bdist_wheel"
            }
        }

        stage('Publish') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'pypiCredentials', usernameVariable: 'PYPI_USER', passwordVariable: 'PYPI_PASS')]) {
                    sh "source $VENV && twine upload -u $PYPI_USER -p $PYPI_PASS dist/*"
                }
            }
        }
    }

    post {
        always {
            sh 'rm -rf venv dist build'
        }

        success {
            echo 'Build succeeded! Sending email notification...'
            emailext body: 'Build succeeded. Package published.',
                     subject: 'Build Successful', to: 'developer@example.com'
        }

        failure {
            echo 'Build failed! Sending Slack notification...'
            slackSend channel: '#build-notifications',
                      color: 'danger',
                      message: 'Build failed for Python project.'
        }
    }
}
